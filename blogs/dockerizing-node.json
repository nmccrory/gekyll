{
	"Title": "Dockerizing Node.js",
	"Author": "Nick McCrory",
	"Date": "07/10/2016",
	"Route": "dockerizing-node",
	"First": "Docker is a software containerization platform that gives developers a consistent working environment and optimizes resource consumption, taking the complications out of migrating applications from development to production.",
	"Body": "<p>Docker is a software containerization platform that gives developers a consistent working environment and optimizes resource consumption, taking the complications out of migrating applications from development to production.<\/p>\n\n<p>Since launching in 2013, Docker has quickly become one of the most essential open-source products in the cloud community.<\/p>\n\n<p>In this piece, I\u2019m going to walk you through getting a barebones Node.js app running inside of a Docker container. I\u2019ll be assuming that you have an understanding of Node.js but before getting started, make sure that you\u2019re running the Docker Toolbox which can be downloaded at <a href=\u2018https://www.docker.com/products/docker\u2019>https://www.docker.com/products/docker<\/a>.<\/p>\n<h3>Setting up Node and Express<\/h3>\n<p>Create a new directory for this project. For this example, I\u2019m going to be using docker-node as the name of my working directory.<\/p>\n\n<p>Node.js allows you to describe your application using a file called package.json where you can also specify app dependencies. Inside of your working directory, make a file called package.json to describe our app:<\/p>\n<pre><code>{\n\t\"name\": \"docker-nodejs\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"Application description goes here\",\n\t\"author\": \"< your name >\",\n\t\"main\": \"server.js\",\n\t\"scripts\": {\n\t\t\"start\": \"node server.js\"\n\t},\n\t\"dependencies\": {\n\t\t\"express\": \"^4.12.4\"\n\t}\n}<\/code><\/pre>\n\n<p>As you\u2019ll notice, I specify a \u201cstart\u201d script inside of the \u201cscripts\u201d key - I\u2019ll elaborate on what this does since I had never seen it before deploying a Node.js app. When NPM runs the package.json file in a remote environment, it looks for a \u201cstart\u201d value. The \u201cstart\u201d value is the command run to start your app.<\/p> \n\n<p>Next create a file called server.js - this will be our Node.js app. We\u2019re going to use the Express.js framework in this case to make things easier.<\/p>\n\n<pre><code>'use strict';\nvar express = require('express');\n\nconst port = 8080;\n\nvar app = express();\n\napp.get('/', function(req, res){\n\tres.send(\"The Whale is running this Node app\\n\");\n});\n\napp.listen(port, function(){\n\tconsole.log(\"Running on localhost: \"+port);\n});<\/code><\/pre>\n<h3>Working with Docker<\/h3><p>\n\n<h5>Create a Dockerfile<\/h5>\n\n<p>A Dockerfile is \u201ca text document that contains all the commands a user could call on the command line to assemble an image\u201d. At build time, the Dockerfile is used to generate a Docker image specific to your application, which can then be run in a container instance.<\/p> \n\n<p>Create a blank file and save it as \u201cDockerfile\u201d with no file extension.<\/p> \n\n<p>After saving your Dockerfile, start by defining which image you want the Dockerfile to build off of. For this example we\u2019re going to build from the latest Long Term Support (LTS) version of Node which is called \u201cArgon\u201d.<\/p>\n<pre><code>FROM node:argon<\/code><\/pre>\n<p>Now we need to create a working directory to hold our code inside of our container:\n\n<pre><code>RUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app<\/code><\/pre>\n\n<p>Before moving all of our code into the working directory, we only want to copy package.json. Once package.json is copied we npm install to install our dependencies.<\/p>\n\n<pre><code>COPY package.json /usr/src/app\nRUN npm install<\/code><\/pre>\n\n<p>Now that the app dependencies have been installed we can copy over the rest of our code.<\/p>\n\n<pre><code>COPY . /usr/src/app<\/code><\/pre>\n\n<p>And last, but certainly not least, we tell our container to expose port 8080 and run the npm start command.<\/p>\n\n<pre><code>EXPOSE 8080\nCMD [ \"npm\", \"start\"]<\/code><\/pre>\n\n<p>Here\u2019s the finished Dockerfile for our app:<\/p>\n\n<pre><code>FROM node:argon\n\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\nCOPY package.json /usr/src/app\nRUN npm install\n\nCOPY . /usr/src/app\n\nEXPOSE 8080\nCMD [ \"npm\", \"start\"]<\/code><\/pre>\n\n<h5>Building a Docker Image<\/h5>\n\n<p>In a terminal window, navigate to the directory holding your Dockerfile and run this command:<\/p>\n<pre><code>$ docker build -t <your username>/docker-node .<\/code><\/pre>\n\n<p>This command tells Docker to build an image of your application from the Dockerfile we just wrote. In case you\u2019re wondering, the -t option is used as a \u2018tag\u2019 so we can track and see the image with the <code>$ docker images<\/code> command.<\/p>\n\n<p>Run the docker images command and you should see the new image listed:<\/p>\n<pre><code>$ docker images\n\n# Example\nREPOSITORY                      TAG        ID              CREATED\nnode                            argon      539c0211cd76    3 weeks ago\n<your username>/docker-node    latest     d64d3505b0d2    1 minute ago<\/code><\/pre>\n<h5>Running a Docker Image<\/h5>\n\n<p>Run the Docker image you just built:<\/p>\n\n<pre><code>$ docker run -p 49160:8080 -d <your username>/docker-node <\/code><\/pre>\n\n<p>You\u2019ll notice that the -p option is used to redirect a public port to a private port in the container. Using -d runs the container in detached mode, leaving it running in the background.<\/p>\n\n<h3>Test the Dockerized App<\/h3>\n\n<p>Before testing your app, you need to get the IP Address the Docker daemon is using. You can find the daemon IP Address by running the Docker Quickstart Terminal and reading which machine Docker is configured to use on your machine.<\/p>\n<pre><code>\n                        ##         .\n                  ## ## ##        ==\n               ## ## ## ## ##    ===\n           /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\___/ ===\n      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~\n           \\______ o           __/\n             \\    \\         __/\n              \\____\\_______/\n\n\ndocker is configured to use the default machine with IP 192.168.99.100\nFor help getting started, check out the docs at https://docs.docker.com\n<\/code><\/pre>\n<p>All we need to do now is get the port Docker mapped for us:<\/p>\n\n<pre><code>$ docker ps\n\n# Example\nID            IMAGE                                COMMAND    ...   PORTS\necce33b30ebf  <your username>/node-web-app:latest  npm start  ...   49160->8080<\/code><\/pre>\n<p>Now, go ahead and test your app by opening <MACHINE IP>:8080 (this is the port being exposed by the container)<\/p>\n\n<p>You can also call your app using curl<\/p> \n\n<pre><code>$ curl -i <MACHINE IP>:8080<\/code><\/pre>\n\n<h5>Troubleshooting<\/h5>\n\n<p>If your app is refusing connections or not functioning as needed, you can check the Docker logs. (use <code>$ docker ps<\/code> to get the container id)<\/p>\n\n<pre><code>$ docker logs <container id><\/code><\/pre>\n\n<p>For some cases, you may find it helpful to go into the Docker container itself to run commands or see internal application errors.<\/p>\n\n<pre><code># Enter the container\n$ docker exec -it <container id> /bin/bash<\/code><\/pre>\n\n<h3>Recap<\/h3>\n \n<p>Node.js and the Express framework were used to make a simple webserver. We used a package.json file to describe our app and declare dependencies. But that\u2019s not the cool part\u2026<\/p>\n\n<p>A Dockerfile was created to build our application into an image and that image was then run by Docker Engine into a container instance. You successfully ran a Node.js app in a Docker container! Don\u2019t go too crazy with your afterparty.<\/p>\n\n<p>I recently used Elastic Beanstalk to deploy my Docker container to Amazon Web Services. After deploying a standalone Node.js app to Elastic Beanstalk, I can tell you it\u2019s much less painful to deploy with Docker. So to spare others from #deploymentprobs I\u2019ll be writing a follow up tutorial to show you how to deploy a Docker container to AWS Elastic Beanstalk.<\/p>",
	"Image": "../static/images/docker-node.jpg"
}