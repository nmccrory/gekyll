{
	"Title": "Serving Content From DynamoDB Using Go",
	"Author": "Nick McCrory",
	"Date": "08/25/2016",
	"Route": "dynamo-go-examples",
	"First": "Recently, I've been getting my hands dirty by writing articles for distributed systems news site, The New Stack. Originally I had written an article for them that laid out the reasons why I left LSU computer science to pursue software development.",
	"Body": "<p>Recently, I've been getting my hands dirty by writing articles for distributed systems news site, <a href='http://thenewstack.io'>The New Stack<\/a>. \n\n<p>Originally I had written an article for them that laid out the reasons why I left LSU computer science to pursue software development. However, I'm happy to say that I am now covering all things Go (the programming language). Not only am I covering Go but I'm currently learning it at the same time by writing projects and contributing to projects on Github. I guess you could say I'm in the process of becoming a Gopher.<\/p>\n\n<p>I've been working on a side project called Geddit that put simply, is a Reddit clone written in Go. When writing my implementation of Reddit I decided to use DynamoDB as my database but to do this I had to work with the Amazon Web Services SDK for Go. <\/p>\n\n<p>Once I started to work with the DynamoDB package that comes with the AWS SDK, I would spend in some cases hours trying to configure requests for Dynamo. This shouldn't have been the case because after getting everything to work, I realized that it really only takes about 10 minutes and a few pieces of code. <\/p> \n\n<p>After you cut through all the bullish that Amazon has inside of their examples, it's easy to use the SDK to format data for and make requests to DynamoDB so that's what I'm aiming for here. No bullish examples of making requests to DynamoDB in Go. <\/p>\n\n<h3>Dynamo Examples in Go<\/h3>\n\n<p>These examples are going to be DynamoDB requests in Go. While there are more options you can use with your request, only the required ones will be used in these examples. I found that these methods got me up and running in the shortest amount of time. <\/p>\n\n<p>The <code>dynamodbattribute<\/code> library is used to convert our data structures to type <code>dynamodbattribute.AttributeValue<\/code>. That AttributeValue is the data format used by the AWS SDK to define attribute values and data types (int, string, list, etc).<\/p>\n\n<h4>Put Item<\/h4>\n<p>The following example is writing items to a table in DynamoDB. In this example the attributes of the table item are ID, Name, and Email.  For this case attribute values are fixed.<\/p>\n\n<pre><code>\nt := myType{ID: 100001, Name: Walter White, Email: waltwhite@heisenberg.com}\n\nav, err := dynamodbattribute.MarshalMap(t)\nif err != nil {\n\tlog.Println(\"Failed to marshal data\", err)\n\treturn\n}\n\nsess := session.New(&aws.Config{Region: aws.String(\"us-west-2\")})\n\nsvc := dynamodb.New(sess)\n\nresult, err := svc.PutItem(&dynamodb.PutItemInput{\n\tItem: av,\n\tTableName: aws.String(\"TABLENAME\")\n})\n\nif err != nil {\n\tlog.Println(\"Failed to save item to table\", err)\n\treturn\n}\n\nlog.Println(\"Successfully added item to table.\", result)\n<\/code><\/pre>\n\n<h4>Get Item<\/h4>\n<p>Now that an item has been added to the table, it's possible to read that item from the table. A <code>.GetItem<\/code> request is simple. Define the Primary Key that we are trying to retrieve along with its TableName. Also, define the attributes we want to get back in the response.<\/p>\n\n<pre><code>\nsess := session.New(&aws.Config{\n\tRegion: aws.String(\"us-west-2\")\n})\n\nsvc := dynamodb.New(sess)\n\n// Key must be defined as a\n// dynamodb.AttributeValue \nk := 100001\nav, err := dynamodbattribute.Marshal(k)\n\nif err != nil {\n\tlog.Println(\"Failed to marshal primary key\", err)\n\treturn \n} \n\nparams := &dynamodb.GetItemInput{TableName: aws.String(\"TABLENAME\"), Key: av, AttributesToGet: []*string{aws.String(\"ID\"), aws.String(\"Name\"), aws.String(\"Email\")}, ConsistentRead: aws.Bool(true),}\n\nresp, err := svc.GetItem(params)\nif err != nil {\n\tlog.Println(\"Error fetching item\", err)\n\treturn \n}\n\n// Convert response data \n// back to Go type \nm := myType{}\ndynamodbattribute.UnmarshalMap(resp.Item, &m)\n\nreturn m\n<\/code><\/pre>\n\n<h4>Scan<\/h4>\n<p>The <code>.Scan<\/code> operation doesn't require a Primary  Key. It simply \"Scans\" over the items in the table and returns each item along with specified attributes.<\/p>\n\n<pre><code>\nsess := session.New(&aws.Config{Region: aws.String(\"us-west-2\")})\n\nsvc := dynamodb.New(sess)\n\nparams := &dynamodb.ScanInput{TableName: aws.String(\"TABLENAME\"), AttributesToGet: []*string{aws.String(\"ID\"), aws.String(\"Name\"), aws.String(\"Email\")}}\n\nresp, err := svc.Scan(params)\n\nif err != nil {\n\tlog.Println(err.Error())\n}\n\n// The response object that Dynamo\n// returns will need to be Unmarshaled\n// and converted to a Go type.\n\n// That part is up to you since it's\n// so case specific\n\nreturn resp\n<\/code><\/pre>\n\n<h4>Update an Item<\/h4>\n<p>There are a lot of possible ways to update an item. If the item to update doesn't exist Dynamo will even create a new one for you. Since there are so many options you can specify in an UpdateItem request I'm going to use an incredibly minimalistic example. This example updates a single attribute field.<\/p>\n<pre><code>\n\n// Marshal key to access item\nd := 100001\nav, err := dynamodbattribute.Marshal(d)\n\nsess := session.New(&aws.Config{Region: aws.String(\"us-west-2\")})\n\nsvc := dynamodb.New(sess)\n\n\n// ExpressionAttributeValues defines\n// variables that we can use in our \n// UpdateExpression statement\nparams := &dynamodb.UpdateItemInput{TableName: aws.String(\"TABLENAME\"), Key: av, ExpressionAttributeValues: map[string]*dynamodb.AttributeValue{\":name\": {S: aws.String(\"Lannister\")}}, UpdateExpression: aws.String(\"SET Name = :name\")}\n\nresp, err := svc.UpdateItem(params)\nif err != nil {\n\tlog.Println(\"Failed to update item.\", err)\n\treturn\n}\n\nlog.Println(resp)\n<\/code><\/pre>\n<p>These are the kinds of examples that I wish I would have been able to see when I started to mix DynamoDB and Go. Unfortunately, Amazon didn't have an official SDK for Go until 2014 and before that the community was using an open source library to communicate with AWS. It seems that because of the back and forth between standards the amount of examples showing how to interact with AWS in Go are somewhat lacking right now. However, this is one of possibly many articles aiming to fix that.<\/p>",
	"Image": "../static/images/dynamo-golang.jpg"
}